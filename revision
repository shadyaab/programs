Encapsulation
  - Wrapping of the data(field) and behaviour(method) into a single unit is called encapsulation
  - In encapsulation, the variables of a class will be hidden from other classes, 
      and can be accessed only through the methods of their current class
  - It is also called data hinding
  - It is a protective shield that prevents the data from being accessed by the code outside this shield.
  - Benefits
      - The fields of a class can be made read-only or write-only.
      - A class can have total control over what is stored in its fields

Polymorphism
  - Polymorphism is the ability of an object to take on many forms
  - Poly mean many and morphs mean form -> polymorphism mean many form

Abstraction
  - 

Access Specifier
  private  - same class
  protected - derived class/within same package
  default - derived class/ any package
  public - access anywhere.
  
Composition 
  - has a relationship
  - Creating object in another class.
  - It is used when you want to access feature of an existing class.
  - Ex. :  Car has a Engine
  
Aggregation 
  - dynamic composition
  
Association
  - 

Inheritance
  - IS a relationship
  - It like verionsing the feature of an existing class.
  
Note: 
  - islike-a-relationship: If class is derived as well as inherited.
  - Ex. :  B extends A implement I


JavaDocs 
  - Embed HtMl
  - doc Tags
  
============================================================================================
Operators 
===========================================================================================
# Argument(Non-primitive) in method call is "Pass by Reference".
# Follows BODMAS rule

long a = 23;     //Valid
long a = 23l;    //Valid
long a = 23L;    //Valid

Long a = 23;     //Not Valid
Long a = 23l;    //Valid
Long a = 23L;    //Valid

* Same for all others like Double, float...

float f = 1.39 e-43f
  - It means 1.39 X (10 to the power -43)
  - Compiler normally takes exponential as Double, so trailing f is required.
  - In maths it means (1.39 X (e to power -43)). e refer to 2.718
  - double f1 = 2e2    // 200
  
float f1 = 3.2;  // Invalid since 3.2 is double  

if(i1 = i2)     // Invalid  (i1, i2 is int)
if(b1 = b2)     // Valid    (b1, b2 is boolean)

sizeOf()        //Its not in java since all the data types are same on different machine 


============================================================================================
Controlling Execution
============================================================================================

for(int i = 1, j = i + 10; i < 5; i++, j = i * 2) {
      System.out.println("i = " + i + " j = " + j);
}

  - Can define multiple variables
  - It should be of same type
  - pre increment or post increment doesn't impact
  
for(int i : range(10)){
  System.out.println("i = " + i);
}
  - forEach 
  - Range Automatically generate appropiate array
  
============================================================================================
Keywords
============================================================================================
final 
  - Value cannot be changes once assigned.
  - if we make reference as final, we cannnot change the reference and point to other object but the values of the Object can be 
    modified.
  - Value can be assing in final varible in two places
      1. When is declared.
      2. In constructor
  - We can declare final in the method argument
  - Any private member is implicitly final.
  - If used with class  -> Class cannot be extended.
  - If used with metohd -> Method cannot be overriden
  - If used with variable -> Value/Reference cannnot be changed.
  
abstract
  - 


============================================================================================
Exception 
============================================================================================

Checked Exception
	- Checked exceptions are checked at compile-time
	- It means if a method is throwing a checked exception then it should handle the exception
	- If it h=is not handled it will give compile time error.
	- Checked Exception is direct sub-Class of Exception
	- Ex - FileNotFoundException, IOException, SQLException, ClassNotFoundException
	
Unchecked Exception
	- Unchecked exceptions are not checked at compile time
	- It means if your program is throwing an unchecked exception and even if you didn’t handle/declare that exception, 
	   the program won’t give a compilation error
	- All Unchecked exceptions are direct sub classes of RuntimeException class.
	-  ArrayIndexOutOfBoundsException, NullPointerException, ArithmeticException, NumberFormatException
	
Error
	- Error class represents the errors which are mainly caused by the environment in which application is running
	- It can't be handled. Recovering from Error is not possible
	- It is considered as Unchecked Exception.
	- Errors happen at run time. They will not be known to compiler.
	- Ex - OutOfMemoryError, StackOverflowError  

throw
	- throw is a keyword in java which is used to throw an exception manually

throws
	- throws is also a keyword in java which is used in the method signature to indicate that this method may throw mentioned exceptions
	- The caller to such methods must handle the mentioned exceptions 

Throwable
	- Throwable is a super class for all types of errors and exceptions in java


============================================================================================
Inheritance 
============================================================================================

* In inheritance, subObject of base class is placed inside the derived class.
* Overloading works accross scopes
	i.e. Method in derived class and method is base class with same name can be considered as overloading

Overriding 
  - Same Signature
  - Covarient return type (Is-a-relationship)
  - Cannot reduce visibility
  - Exception 
      - If super class doesn't declare exception 
            -> Can't declare any checked exception
            -> It can declare checked exception.
      - If super class declare exception 
            -> Can declare same exception
            -> Can declare exception lower the hierarchy
            -> Can choose not to declare any exception 
  
Overloading 
  - Same signature
  - Return type doesn't matter
  - Visiblity doesn't matter
  

  
============================================================================================
Polymorphism
============================================================================================
Polymorphism is a OOPs concept where one name can have many forms.

Types:
	- Compile Time (static binding)
		- Method overloading
	- Runtime (Dynamic Binding)
		- Method Overrinding

Upcasting 
	- Creating an Object of derived class and treating it as a reference to base class.

- Private method cannot be overriden as well as overloaded in Base-Derived Hierarchy
- Only methods can be polymorphic
- Variable cannot be polymorphic
- Static methods doesn't behave polymorphic

* If you upcast, you cant call the new methods(other that it has) in the derived class.
* Upcast is always safe because the base class cannot have a bigger interface than the derived class.
* Downcast is not safe
* ClassCastException is thrown if it is not of the type.

class Base{
	void m1() {
		System.out.println("m1 in base");
	}
	void m3() {
		System.out.println("not overriden in Derived class");
	}
}
class Derived extends Base{
	void m1() {
		System.out.println("m1 in derived");
	}
	void m2() {
		System.out.println("un overriden");
	}
}

public class Test1 {
	public static void main(String[] args) {
		Base b = new Derived();
		b.m2();								// Compilation error (m2 should be available in Base class)
	}
}


============================================================================================
Interface and Abstract class
============================================================================================
abstract class	
	- It can have zero or more abstract method.
	- If one of the method is abstract, class should be abstract
	- If the implementation class doesn't implement all the abstract method, then this class should be abstract.
	- Object cannot be created.
	- It has constructor as well

interface
	- 100% abstraction 
	- field inside interface is implicity static and final
	- methods are implicitly public
	- it can extends multiple interface.
	
* Interface can only extends another interface not implements it.
	
Scenario:
1. If you have interface having some abstract method and another class having implementation of method in 
   that interface (Though it doesn't implements interface). 
       And in the Implentation class which extends Class and implements that interface, methods in the interface
       need not to define in it.
       	    Since the defination is present in the class.

Interface vs Abstract class
    - Interface is used when one want method with no defination as well as no member variable.
    - Interface is used when you want a class to implements multiple interface.
    
    - Abstract class is prefer where you want method defination as well as abstract method
    - Abstract class is prefer when you want some member variables.
	    
* Fields defined in inteface should not be blank final. Value should be assigned when declared.
* Inteface can be private if it is nested within the class.
* Interface cannot be private if it is nested within the another interface.
	    
TODO : Name collision in interface	

============================================================================================
Inner Class
============================================================================================
Nested Class  Type:
	- Static nested class
	- Non-static nested class

Static Nested Class	
	- Static nested class can contain both static and non static member
	- We can access only static member of outer static class inside nested static class.
			- We cannot access non-static member
	- Static nested class can be abstract and final
	- Access to nested static class methods (Same will be for fields)
		~ OuterClass.InnerClass.method()      			//Access to static method
		~ new OuterClass.InnerClass().method()			//Access to non-static method.
	- For each nested class separate .class file will be genereted (Ex- OuterClass$NestedClass.class)
	
Non-Static Nested Class 
	- Also called inner Class
	- Types 
		~ Member Inner class
		~ Local Inner Class
		~ Anonymours Inner Class
		
	Member Inner Class 
		- It must only contains non-static members. (Static members are not allowed)
		- Static field is allowed only if it is final. And it should be initialized at time of declaration
			~ static methods are not allowed even if it is final
		- Its should not contain static block.
		- Both static and non-static member of Outer class can be access 
		- How to Access
			~ new OuterClass().new InnerClass().method();
		- All member of outer class can be accessed in inner class and vice versa irrespective of access specifier(visibility).
		- Member inner class can be final as well abstract but not both.
		
	Local Inner Class	
		- It is the class declared inside a method or block.
		- It can't be static. This is nothing but a local variable and local variable can't be static.
		- It can't have static members. But it can have field which static and final both.
		- It can't be access from outside the method or block where it is defined.
		- It can be accessed within the method itself.
		- It can't be declare with access modifier i.e. private, protected, public.
		- Only final local variable inside the method or block can be accessed from within the local inner class in the same method.
		- It can be final or abstract but not both.
		
	Anonymous Inner Class
		- As name suggest class without name
		- Only one object can be created. 
		- When you are creating anonymous inner class you are actually creating a sub class 
			to a class which needs to be modified.
		- While creating an anonymous inner class you are also creating an object to that subclass
		- Using anonymous inner class, you can implement both abstract classes and interfaces.
			~ it doesn't required keyword extends or implements

Variable hiding or shadowing
	- A variable is hidden or shadowed, if there is another variable exist with the same name in the nearer scope.
	- If sub class has variables with the same name as that of super class, it hides or shadows super class variable
	- If inner class has a variable with the same name as that of an outer class, then it hides or shadows outer class variable
		~ OuterClassName.this.variableName can be used to access non static field
		~ OuterClassName.variableName can be used to access static fields
		
Inheritance of Inner class
	- One inner class can extend another inner class of the same class.
	- An inner class can be extended by another class outside of it’s outer class
		~ If you are extending static inner class (Static nested class), then it is a straight forward implementation
		~ If you are extending non-static inner class, then sub class constructor must explicitly call super class 
		   constructor using an instance of outer class. 
		   Because, you can’t access non-static inner class without the instance of outer class.
		class OuterClass
		{
			static class InnerClassOne
			{
				//Class as a static member
			}
			class InnerClassTwo
			{
				//Class as a non-static member
			}
		}
 
		//Extending Static inner class or static nested class
		class AnotherClassOne extends OuterClass.InnerClassOne
		{
			//static nested class can be referred by outer class name,
		}
 
		//Extending non-static inner class or member inner class
		class AnotherClassTwo extends OuterClass.InnerClassTwo
		{
			public AnotherClassTwo()
			{
				new OuterClass().super();  //accessing super class constructor through OuterClass instance
			}
		}
	
	- Inner class can extend it’s outer class
		~ it does not serve any meaning
		~ Because, even the private members of outer class are available inside the inner class


============================================================================================
Collection
============================================================================================		
		   
List
	- Elements of the lists are ordered using Zero based index.
	- You can access the elements of lists using an integer index.
	- Elements can be inserted at a specific position using integer index. Any pre-existing elements at or beyond that position are shifted right.
	- Elements can be removed from a specific position. The elements beyond that position are shifted left.
	- A list may contain duplicate elements.
	- A list may contain multiple null elements.
	
	Types:
		- ArrayList  (extends abtractList and implements List)
			- You can traverse an ArrayList in both the directions – forward and backward using ListIterator.
			- ArrayList internally uses an array to store its elements
			- ArrayList can hold only Object.
			- When reaches threshold, capacity is increase by half of current capacity.
			
			- Collections.sort(listOfStudents, new OrderByPercentage());    //Sort using Comparator
			- Collections.sort(list, Collections.reverseOrder());   		//sort in reverse order
			- Collections.sort(list, String.CASE_INSENSITIVE_ORDER);		//sort by ignoring case
			- Collections.reverse(list);
			
		- Vector	(extends abtractList and implements List)
			- vector is synchronized
			- Unlike an ArrayList, you can set the size of the Vector manually
			- It get double when size reaches threshold
			- Traversed using Enumeration.
			- unlike ArrayList it has firstElement() and lastElement()
			- unlike which start from beginning, you can start searching for a particular element from a particular position in a vector
			
		- LinkedList	(extends AbstractSequentialList(which in turns extends AbstractList) and implements List, Queue)
			- Its doubly linked list.
			- Elements can be inserted and can be removed from both the ends and can be retrieved from any arbitrary position.
			- Insertion and removal operations in LinkedList are faster than the ArrayList
			- Retrieval of the elements is very slow in LinkedList as compared to ArrayList. Becaues in LinkedList, you have to traverse from 
			     beginning or end (whichever is closer to the element) to reach the element.
			- Its not random access
			- It maintain insertion order.
		- CopyOnWriteArrayList 
			- It is enhanced version of ArrayList in which all modifications (add, set, remove, etc) are implemented by making a fresh copy.
			- CopyOnWriteArrayList creates a Cloned copy of underlying ArrayList, for every update operation
			-  Iterator of CopyOnWriteArrayList can not perform remove operation
			
Queue	
	- Queue is a data structure in which elements are added from one end and elements are deleted from another end. 
	- Have two pointer head and tail.
	- Null elements are not allowed in the queue. If you try to insert null object into the queue, it throws NullPointerException.
	- Queue can have duplicate elements.
	- not random access.
	- poll and remove 
		~ get the element from head and removes it.
		~ If no element found, poll will return null as well as remove will throw exception
	- peek and element
		~ get the element without removing it.
		~ If no element found, get will return null as well as element will throw exception
	
	Type:		
		- PriorityQueue 	(extends AbstractQueue (which in turn implement Queue))
			- The PriorityQueue is a queue in which elements are ordered according to specified Comparator
			- If no Comparator is specified, elements will be placed in their natural order
			- Its not FIFO
			- null is not allowed
			- Elements in the PriorityQueue must be of Comparable type, If not ClassCastException at run time will be thrown.
			- The PriorityQueue is unbounded which means capacity grows but not certain.
			- The default initial capacity of PriorityQueue is 11.
			
Deque	(extends Queue)
	- Double Ended Queue
	- Deque is a linear collection of objects which supports insertion and removal of elements from both the ends
	- Can be used as both Queue(FIFO) as well as Stack(LIFO)
	- It has two more methods – pop() and push() which makes it a candidate for stack.
	- It can have null values.
		
	Type:	
		- ArrayDequeue		(extends AbstractCollection and implements Queue)
			- which allows insertion of elements at both the ends
			- Default initial capacity of ArrayDeque is 16
			- ArrayDeque is faster than the Stack class when used as a stack
			- ArrayDeque is faster than the LinkedList class when used as a queue
		
Set
	- No duplicates
	- Set doesn't have any method of its own.
	- Only changes in set is if we add(element) it return false if it already present.
	- Can contain only one null values.
	- No random access.
	
	Types:
		- HashSet	(extends AbstractSet implements Set)
			- Hashset element are ordered on hashcode of the element.
			- HashSet gives constant time performance for insertion, removal and retrieval operations
			- It allows only one null element.
			- The HashSet internally uses HashMap to store the objects
			- The elements you insert in HashSet will be stored as keys of that HashMap object and their values will be a constant called PRESENT. 
			- If you try to insert a duplicate element, older element will be overwritten.
			- If you want synchronized HashSet, use Collections.synchronizedSet()
			- Whenever you create a HashSet object, one HashMap object associated with it is also created
			- HashSet uses equals() and hashCode() methods to compare the elements and thus removing the possible duplicate elements.
			- Iterator returned by all three is fail-fast in nature
			
		- LinkedHashedSet   	(extends HashSet implements Set)
			- It maintain insertion order.
			- Its doubly linked list
			- Internally uses LinkedHashMap 
			- slightly have less performance than Hashset since it maintain insertion order.
			- Iterator return by LinkedHashset is fail-fast i.e. 
			- It allow only one null value.
			- Contructor of this class call super constructor(HashSet), which internally create object of linkedHashMap.
			- LinkedHashSet doesn't have method of its own, it inherit from super class.
			- The elements you insert in LinkedHashSet will be stored as keys of that LinkedHashMap object and their values will be a constant called PRESENT.
			- LinkedHashSet also uses equals() and hashCode() methods to compare the elements.
			- The insertion order of elements into LinkedHashMap are maintained by adding two new fields to this class. They are before and after
				These two fields hold the references to previous and next elements
		
		- TreeSet		(extends AbstractSet and implements NavigableSet(which inturn extends SortedSet)
			- Tree element are order according to the comparator supplied
			- Its sorted 
			- If you don’t pass any Comparator while creating a TreeSet, elements will be placed in their natural ascending order.
			- If the elements are not mutually Comparable, then it will throw ClassCastException at runtime.
			- It doesn't allow even single null value.
			- TreeSet gives performance of order log(n) for insertion, removal and retrieval operations.
			- If TreeSet is modified after the creation of Iterator object, you will get ConcurrentModificationException.
			- TreeSet internally uses TreeMap
			- TreeSet uses compare() or compareTo() methods to compare the elements and thus removing the possible duplicate elements
			- It doesn’t use equals() and hashCode() methods for comparision of elements.
			
Map
	- It doesnot inherits from Collection interface.
	- It store key value pair.
	- A map can not have duplicate keys but can have duplicate values.
	- Each key-value pairs of the map are stored as Map.Entry objects. Map.Entry is an inner interface of Map interface.
	- method like keySet(), values(), entrySet()
	
	Types:
		- HashMap  		(extends AbstractMap)
			- It maintain no order.
			- HashMap gives constant time performance for the operations like get() and put() methods.
			- Default initial capacity of HashMap is 16.
			- HashMap can have multiple null values and only one null key.
			- If the key is null, it calls putForNullKey() method. table[0] is always reserved for null key.
				hash value of null is 0
			- The default initial capacity of the HashMap is 24 i.e 16
			-  The capacity of the HashMap is doubled each time it reaches the threshold
			- The default load factor is 0.75f.
			- allows duplicate values but doesn’t allow duplicate keys.
			- The iterators returned are fail-fast in nature.
		- LinkedHashMap
		- TreeMap
		- HashTable
			- HashTable extends Dictionary class which is the legacy class in java.
			- Its synchronized.
			- Where as HashTable doesn’t allow even a single null key and null value.
			- HashTable returns Iterator as well as Enumeration which can be used to traverse over the elements of HashTable.
			- Its fail-safe
		- ConcurrentHashMap
			- it only locks a portion of Map, instead of whole Map
			- Its fail-safe
			- ConcurrentHashMap allows concurrent read and thread-safe update operation.
			- During the update operation, ConcurrentHashMap only locks a portion of Map instead of whole Map.
			- The concurrent update is achieved by internally dividing Map into the small portion which is defined by concurrency level.
			- ConcurrentHashMap doesn't allow null as key or value.
			
fail-fast	
	- if you modify after the iterator is created, it will throw ConcurrentModification Exception.
	
fail-safe
	-  they don’t throw any exceptions if it is modified after the creation of enumeration.
	- Ex- HashTable
			
Iterator vs ListIterator
	- Using Iterator, you can traverse List, Set and Queue type of objects but we can traverse the elements only in forward direction
	- using ListIterator, you can traverse only List objects but using ListIterator you can traverse the elements in both the directions
	- Using ListIterator, you can perform modifications(insert, replace, remove) on the list. But, using Iterator you can only
    	remove the elements from the collection.
	- Using ListIterator, you can iterate a list from the specified index. It is not possible with Iterator. 
	
	

============================================================================================
Concurrent Programming
============================================================================================			
		
Thread Safe
	- A class is thread-safe if it behaves correctly when accessed from multiple threads, regardless of the scheduling or interleaving of the execution of
        those threads by the runtime environment, and with no additional synchronization or other coordination on the part of the calling code.
		
Atomicity
	- It mean single and indivisible operation.
	
Race Condition
	- Race condition occur when the correctness of the program depends on the relative timing of multiple thread running concurrently. 
	- Type:
		- check-then-act
			- lazy initialization
			- The goal of lazy initialization is to defer initialing an Object untill it is actually needed.
			- while at the same time ensuring that it is initialized only once.
			
		- read-modify-write
			- Like incrementing counter (counter++)
	- Adding one thread safe state object to the thread safe class doesn't impact its thread safety.
	- Adding more than one thread safe state object to the thread safe class impact its thread safety.
		~ Since both object is not an atomic operation collectively.
		
synchronized block
	- it has two part, one is the reference to an object that will serve as lock, and the other is the block of code to be gaurded
		by the lock.
	- A synchronized method is a shorthand for a synchronized block
	- In a synchronized method, lock is the object on which the method is been called, and block is the complete method.
	- static synchronized method use the class object for the lock. 
	- No matter how the synchronized block is exited, the object lock acquired when the thread entered the block definitely will be released.
	
Monitor
	- A monitor is basically a guardian in that it watches over a sequence of code, making sure only one thread at a time executes the code.
	- Each monitor is associated with an object reference
	
Intrinsic lock or Monitor lock
	- the lock is automatically acquired by the executing thread, before entering into the synchronized block and
		the lock is release automatically when control exits the synchronized block.
	- The only way to acquire an intrinsic lock is to enter a synchronized block or method guarded by that lock.
	- Intrinsic locks in java acts as a mutex (Mutually exclusive lock)
	
Mutex 
	- Mutually exclusive locks.
	- At most one thread may own the lock.
	
Reentrancy
	- If a thread tries to acquire the lock which it already holds, the request succeeds.
	- Retrancy means that lock are acquired on per-thread basis and not on per-invocation basis.
	- Reentrancy is implemented by associating with each lock an acquisition count and an owning thread.
	- Without reentrant locks, in which a subclass overrides a synchronized method and then calls the superclass method, would be deadlock. 
		~ Because the doSomething methods in Widget and LoggingWidget are both synchronized, and each tries to acquire the lock 
		  on the Widget before proceeding.

Volatile
	- Value is read from the memory each time rather than reading it from thread local cache or else where.
	- Volatile variables only garuantees visibilty 
	- It is safe to perform read-modify-write operations on shared volatile variables as long as you ensure 
	   that the volatile variable is only written from a single thread.

* Locking is not just about mutual exclusion; it is also about memory visibility. To ensure that all threads see the most up-to-date values of shared
    mutable variables, the reading and writing threads must synchronize on a common lock.

* Locking can guarantee both visibility and atomicity; volatile variables can only guarantee visibility.

Sharing Objects:
	- Visibility
		- We want not only to prevent one thread from modifying the state of an object when another is using it, but also to ensure that when a 
		    thread modifies the state of an object, other threads can actually see the changes that were made.
	- Stale Data
		- It is something that we can see out-of-date value without using synchronization.
		
	- Thread Confinement
		- If data is only accessed from a single thread, no synchronization is needed.
		Type:
			- Ad-hoc confinement
				~ Ad-hoc thread confinement describes when the responsibility for maintaining thread confinement falls entirely on the implementation.
			- Stack Confinement
				~ Stack confinement is a special case of thread confinement in which an object can only be reached through local variables.
				~ LOcal variable are intrinsically confined to the executing thread.
			- ThreadLocal
				~ Thread-Local provides get and set accessor methods that maintain a separate copy of the value for each thread that uses it,
 				   so a get returns the most recent value passed to set from the currently executing thread.
				~ The thread-specific values are stored in the Thread object itself; 
				~ when the thread terminates, the thread-specific values can be garbage collected.
	- Immutability
		- Immutable object are inherently thread-safe.
	
Synchronizers
		- Latches 
			- A latch is a sychronizer that delay the execution of thread untill it reaches terminal state.
			- Latches can be used to ensure that certain activities do not proceed until other one-time activities complete
			- Ex- wait untill all players are ready in a multiplayer game.
			- Latches are single-use objects; once a latch enters the terminal state, it cannot be reset.
			
		- FutureTask
			- Its also act as a latch.
			- Once a FutureTask enters the completed state, it stays in that state forever
			- The behavior of Future.get depends on the state of the task. 
			     If it is completed, get returns the result immediately, and otherwise blocks until the task transitions to the completed state
			- FutureTask is used by the Executor framework to represent asynchronous tasks.
		
		- Semaphores
			- Counting semaphores are used to control the number of activities that can access a certain resource or perform 
			   a given action at the same time
			- Counting semaphores can be used to implement resource pools or to impose a bound on a collection.
			- block if the pool is empty and unblock when it becomes nonempty again.
			- Ex - database connection pools
			
		- Barriers
			- Barriers are similar to latches in that they block a group of threads until some event has occurred
			- The key difference is that with a barrier, all the  threads must come together at a barrier point at the same time in order to proceed.
			- Latches are for waiting for events; barriers are for waiting for other threads.
			- await blocks until all the threads have reached the barrier point
			- If all threads meet at the barrier point, the barrier has been successfully passed, in which case all threads 
			   are released and the barrier is reset so it can be used again.
			   
Executor
	- newFixedThreadPool
		- A fixed-size thread pool creates threads as tasks are submitted, up to the maximum pool size, and then attempts to keep the pool size constant 
	- newCachedThreadPool
		- A cached thread pool has more flexibility to reap idle threads when the current size of the pool exceeds the demand for processing, and to add new threads when demand increases, but places no bounds on the size of the pool.
	- newSingleThreadExecutor.
		- A single-threaded executor creates a single worker thread to process tasks, replacing it if it dies unexpectedly.
		- Tasks are guaranteed to be processed sequentially according to the order imposed by the task queue
	- newScheduledThreadPool.
		- A fixed-size thread pool that supports delayed and periodic task execution, similar to Timer.

Lock
	- Lock is an interface
	- ReentrantLock is the class implementing Lock.
	- Methods like
		- void lock();
		- void lockInterruptibly() throws InterruptedException;
		- boolean tryLock();
		- boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException;
		- void unlock();
		- Condition newCondition();
	- It behave same ways as synchronized, but it is explicit.

Limitation of synchronized block
	- it is not possible to interrupt a thread waiting to acquire a lock
	- or to attempt to acquire a lock without being willing to wait for it forever
	- Intrinsic locks also must be released in the same block of code in which they are acquired
	
Benefits of ReentrantLock
	- provides more control on lock acquisition is trying to get a lock with ability to interrupt
	- timeout on waiting for lock
	- ReentrantLock provides convenient tryLock() method, which acquires lock only if its available or not held by any other thread
	- provides a method called lockInterruptibly(), which can be used to interrupt thread when it is waiting for lock
	- ReentrantLock also provides convenient method to get List of all threads waiting for lock.












  
  
  

