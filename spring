Source - https://howtodoinjava.com/spring-core/

Spring Ioc Container
	- It create object, wire them toogether, configure them and manages their complete life cycle 
	    from creation to destruction
	- Container Type
		~ BeanFactory Container
		~ ApplicationContext container
		
	BeanFactory Container
		- In simple term BeanFactory is a container that manages Object.
		- A BeanFactory is essentially nothing more than the interface for an advanced factory 
		    capable of maintaining a registry of different beans and their dependencies
		- The BeanFactory enables you to read bean definitions and access them using the bean factory
			
	ApplicationContext Container
		- It built on top of BeanFactory and it contains other functionality like
			~ easier integration with Spring’s AOP features
			~ message resource handling
			~ event propagation
			~ application-layer specific contexts
		- The ApplicationContext provides:
			~ Bean factory methods for accessing application components.
			~ The ability to load file resources in a generic fashion.
			~ The ability to publish events to registered listeners.
			~ The ability to resolve messages to support internationalization.
			~ Inheritance from a parent context.
		- ApplicationContext implementations
			~ FileSystemXmlApplicationContext
			~ ClassPathXmlApplicationContext
			~ WebXmlApplicationContext

Dependency Injection
	- It's a design pattern which removes dependency from the code, so that it can be managed easily.
	- It makes our code lousely coupled.
	
DI vs IoC
	- Ioc is a design paradigm which give more control to the target component of your application, the one getting work done.
	- DI is a design pattern used to create instance of object that other object rely on without knowing at compile time.
	- IoC relies on DI.
	
Creation of Bean
	- Using constructor
		~ <bean id="exampleBean"/>
		~ Just specifying the bean class should be enough
		
	- Using static factory methods
		~ <bean id="exampleBean" factory-method="createInstance"/>
		~ should have factory method in the class for which the bean is being created.
		
	- using instance factory method
		~ <bean id="myFactoryBean"  class="...">
		  <bean id="exampleBean"  factory-bean="myFactoryBean" factory-method="createInstance"></bean>
		~ instantiation using an instance factory method is where the factory method of an existing 
		   bean from the container is invoked to create the new bean.
		   
Dependency Injection
	- Setter Injection
	- Constructor Injection
	- Interface Injection
	
Bean Scope
	- Singleton 
		~ This bean scope is default and it enforces the container to have only 
		  one instance per spring container irrespective of how much time you request for its instance.
	- Prototype
		~ It produces a new instance each and every time a bean is requested.
	- request
		~  a new bean instance will be created for each web request made by client. 
		   As soon as request completes, bean will be out of scope and garbage collected.
	- session
		~ this ensures one instance of bean per user session. 
	- global-session
		~ store variables global for all portlets in your application
		~ In portlets, there will be many applications inside a big application
		~ bean with scope of ‘global-session’ will have only one instance for a global user session.

Bean Life Cycle 
	- IoC container will look for the configuration metadata of given Bean.
	- Once found, the container will create the instance of Bean(Using reflection API).
	- After instance, creation dependency will be injected(DI).
	
	- setBeanName method of BeanNameAware Interface. 
		~ It sets the name of the bean in the bean factory that created this bean.
 	- setBeanClassLoader method of BeanClassLoaderAware Interface. 
		~ Callback that supplies the bean to a bean instance.
  	- setBeanFactory method of BeanFactoryAware Interface. 
	 	~ Callback that supplies the owning factory to a bean instance.
		
	- All the aware method will be invoked like
		~ setResourceLoader  method of ResourceLoaderAware Interface.
	
	- postProcessBeforeInitialization method of BeanPostProcessor Interface. 
		~ Apply this BeanPostProcessor to the given new bean instance before any bean initialization callbacks.
	- afterPropertiesSet method of InitializingBean Interface. 
		~ Invoked by a BeanFactory after it has set all bean properties supplied.
	
	- Custom init method will be invoked.
	- postProcessAfterInitialization methods of BeanPostProcessors. 
		~ Apply this BeanPostProcessor to the given new bean instance after any bean initialization callbacks
		
	----	
	- DisposableBean’s destroy method. 
		~ Invoked by a BeanFactory on the destruction of a singleton.
	- Custome destroy method will be executed if there is any defined via destroy-method attributes

Bean Life Cycle Callback Methods
	- InitializingBean and DisposableBean callback interfaces
		~ It allows bean to perform initialization work after all necessary 
		   properties on the bean have been set by the container.
		~ It contains respective method
			~ void afterPropertiesSet() throws Exception;
			~ public void destroy() throws Exception
		~ it’s not recommended because it will create tight coupling with the Spring framework 
		   in our bean implementations.
		
	- *Aware interfaces for specific behavior
		~ It allow beans to indicate to the container that they require a certain infrastructure dependency
		~ Sometimes we need Spring Framework objects in our beans to perform some operations, for example reading 
		  ServletConfig and ServletContext parameters or to know the bean definitions loaded by the ApplicationContext.
		~ It contains method like
			~ public void setResourceLoader(ResourceLoader arg0)
			~ public void setMessageSource(MessageSource arg0)
			~ public void setBeanName(String arg0) 
			~ public void setApplicationContext(ApplicationContext arg0)
			
 	- Custom init() and destroy() methods in bean configuration file
		~ It can be defined in two ways:
			~ Bean local definition
				<beans>
 				     <bean id="demoBean" class="com.howtodoinjava.task.DemoBean"
                    		     init-method="customInit" destroy-method="customDestroy"></bean>
				</beans>
				
			~ Global definition
				<beans default-init-method="customInit" default-destroy-method="customDestroy">  
       				      <bean id="demoBean" class="com.howtodoinjava.task.DemoBean"></bean>
 				</beans>
			
	- @PostConstruct and @PreDestroy annotations
		~ @PostConstruct annotated method will be invoked after the bean has been constructed 
		   using default constructor and just before it’s instance is returned to requesting object.
		~ @PreDestroy annotated method is called just before the bean is about be destroyed 
		   inside bean container.

Spring BeanPostProcessor
	- A bean post processor allows additional processing before and after the bean initialization callback method. 
          The main characteristic of a bean post processor is that it will process all the bean instances 
   	  in the IoC container one by one, not just a single bean instance.
	
	- To do
		~ Implements BeanPostProcessor Interface
		~ implementst postProcessBeforeInitialization() and postProcessAfterInitialization() methods.

Autowire
	- Bean dependencies is resolved automatically
	- Type : 
		- no
			~ No Autowiring at all.
		- byName
			~ Autowiring by property name will look for a bean named exactly the same as the property which
			  needs to be autowired
		- byType
			~ Allows a property to be autowired if there is exactly one bean of the property type in the 
			  container. 
			~ If there is more than one then it will throw exception
		- constructor
			~ This is analogous to byType, but applies to constructor argument. 
		- autodetect
			~ Choose constructor or byType through introspection of the bean class. 
			~ First it will try to look for valid constructor with arguments, 
			   If found the constructor mode is chosen
			~ If there is no constructor defined in bean, 
			   or explicit default no-args constructor is present, the autowire byType mode is chosen
	
	- Using @Autowired annotation
		- @Autowired on properties
		     	~ it is equivalent to autowiring by ‘byType‘ in configuration file.
		- @Autowired on property setters
			~ it is also equivalent to autowiring by ‘byType‘ in configuration file.
		- @Autowired on constructors
			~ it is also equivalent to autowiring by ‘constructor‘ in configuration file.
	
	- @Qualifier
		- It resolves the dependency for byType autowire, if more than one bean is present of that type.
		- we need to use @Qualifier annotation along with @Autowired annotation and pass the 
		   bean name in annotation parameter
		   
	- Safe Autowiring with "required = false"
		- It will make autowiring optional.
		- If no dependency is found, it will be ignored, but it will not throw any exception.
		
		@Autowired (required=false)
		@Qualifier ("finance")
		private DepartmentBean departmentBean;
		
	- You can exclude a bean from being autowired.
		- It can be done using ‘autowire-candidate‘ as false in the bean defination.
		- It can be done for single class or for multiple class based on pattern matching.
		

		
		
		
		
	
	
	
	
	
